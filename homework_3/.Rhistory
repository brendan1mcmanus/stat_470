##       . completion
##     Copy/paste code into the R interpreter
##
## - Method (0) is recommended only for the simplest of tasks,
##   when the code is one-liner and you don't need to retain it for later.
##   Example: Playing with a new function you don't understand yet
##            or experimenting with R syntax.
##
## - Method (1) should be the default for any relevant code
##   longer than one line.
##   It allows you to retain code for later and iteratively
##   debug and expand it.
## [How the instructor operates R using the Emacs editor:
##   . Edit code in one window.
##   . Run R inside Emacs in another window.
##   . Execute R code by copying it from the first to the second window.
##   ==> Not recommended for you, unless you already know the emacs editor.
##       You might be better of using R-Studio.
## ]
for (i in 0:100) {
if(i%%3==0) {
print(i)
}
}
1.3:10
-3:10
10:5
-(10:5)
pi
sin(pi/4)
.5*sqrt(2)
1/sqrt(2)
e
Math(e)
exp(1)
exp(10)
exp(1)^10
log(exp(10))
log(exp(10))
log(exp(1)^10)
log10(1000)
log10(5000)
[1:33]*3
(1:33)*3
(0:20)^2
2^(0:20)
-3:10
?interest
interest??
;
??interest
??finance
>
APR?
;
?apr
??apropos
library(swirl)
library(swirl);
install.packages("swirl")
version
update
x <- list(0.07, 0.09, -.1, -.06)
y <- 1000
for (i in x) {
y <- y * (1+i)
}
print(y)
x <- list(0.07, 0.09, -.1, -.06)
y <- 1000
for (i in x) {
y <- y * (1+i)
}
print(1000-y)
x <- list(-0.06, -.1, .09, 0.07)
y <- 1000
for (i in x) {
y <- y * (1+i)
}
print(1000-y)
x <- c(64, 66, 66, 60, 74, 76, 72, 69, 74, 67)
mean(x)
median(x)
sd(x)
x <- list(-0.06, -.1, .09, 0.07)
1000-1000*x
1000-1000*[x]
1000*(1.07*1.09*.9*.94)
1000-1000*(1.07*1.09*.9*.94)
x = x+1
x <- x+1
-(1/4)
5 %/% 2
5 %/ 2
5 % 2
5 %% 2
(-10) %% 3
2.6 %% 0.5
2.6 %/% 0.5
Inf
x <- seq(-1, +1, by = 0.01)
x
x <- seq(-1, +1, by = 0.01, length = 5)
x <- seq(-1, +1, length = 5)
x
y = seq(along=x)
y
seq(length=0)
rep(1,10)
rep(1:3, len=10)
rep(1:3, times=10)
rep(1:3, each=10)
rep(1:3, 1:3)
rep(pi, 10)
rep(1:3, times=5)
rep(1:3, times=2:4)
rep(1:3, times=2:5)
rep(1:3, times=2:4)
amounts <- c(apples=2.0, bananas=5.0, oranges=4.5)
prices <- c(apples=3.50, bananas=1.25, oranges=2.5)
costs <- amounts * prices
total.cost <- sum(costs)
total.cost
costs
(1:10) * (1:2)
x <- seg(-4, +4, by=0.01)
y <- x^2
plot(x, y, type="1")
plot?
;
?plot
plot(x, y)
plot(x, y, type='1')
plot(x, y, type=1)
plot(x, y, type="1")
plot(x, y, type="l")
lines(x, y.3, col="blue", lwd=2)
StudentHeights <- (5,2,1,5,6)
StudentHeights <- c(5,2,1,5,6)
mean(StudentHeights)
StudentHeights <- c(64.0, 66.0, 66.5, 60.0, 74.0, 76.0, 72.0, 69.0, 74.0, 67.0,
74.0, 59.0, 65.5, 63.0, 69.0, 66.8, 66.0, 75.0, 69.0, 69.8)
sum(StudentHeights)
sum(StudentHeights)/length(StudentHeights)
mean(StudentHeights)
StudentHeights[0]
StudentHeights(0)
StudentHeights[1]
StudentHeights[length(StudentHeights)/2]
median(StudentHeights)
StudentHeights[length(StudentHeights)/2 + 1]
StudentHeights[length(StudentHeights)/2 - 1]
StudentHeights[length(StudentHeights)/2]
sort(StudentHeights)
sort(StudentHeights)[length(StudentHeights)/2]
length(StudentHeights)
median(StudentHeights)
if(length(StudentHeights) %% 2 == 0) {}
if(length(StudentHeights) %% 2 == 0) {print 5}
if(length(StudentHeights) %% 2 == 0) {print(5)}
if(length(StudentHeights) %% 2 != 0) {print(5)}
if(length(StudentHeights) %% 5 != 0) {print(5)}
if(length(StudentHeights) %% 5 == 0) {print(5)}
5/2
StudentHeights[2.5]
StudentHeights[3.5]
length(StudentHeights) / 2
sort(StudentHeights)[length(StudentHeights) / 2]
sort(StudentHeights)[length(StudentHeights) / 2 + 1]
(sort(StudentHeights)[length(StudentHeights) / 2] + sort(StudentHeights)[length(StudentHeights) / 2 + 1]) / 2
sort(StudentHeights)[length(StudentHeights) / 2 + 1]
test <- c(1,2,3,4,5)
sort(test)[length(test) / 2 + 1]
test <- c(1,2,3,4,5,6)
sort(test)[length(test) / 2 + 1]
(sort(test)[length(test) / 2] + sort(test)[length(test) / 2 + 1]) / 2
if (length(StudentHeights) %% 2 == 0) {
(sort(StudentHeights)[length(StudentHeights) / 2] + sort(StudentHeights)[length(StudentHeights) / 2 + 1]) / 2
} else {
sort(StudentHeights)[length(StudentHeights) / 2 + 1]
}
median(StudentHeights)
quantile(StudentHeights, probs=0.2)
quantile(StudentHeights, probs=0.4)
quantile(StudentHeights, probs=0.5)
quantile(StudentHeights, probs=0.6)
quantile(StudentHeights, probs=0.8)
quantile(StudentHeights, probs=0.8)
x <- quantile(StudentHeights, probs=0.8)
x
f = c(x)
f
f = c(x, x)
f
c(quantile(StudentHeights, probs=seq(0,1,by=.20)))
c(quantile(StudentHeights, probs=seq(0,1,by=.25)))
c(mean=mean(StudentHeights), med=median(StudentHeights), sdev=sd(StudentHeights))
a <- 1 + 2 +
3
long_string <- "this
is
a
long
string
with
whitespace"
long_string <- "this,
is
a
long
string
with
whitespace"
StudentHeights <- c(64.0, 66.0, 66.5, 60.0, 74.0, 76.0, 72.0, 69.0, 74.0, 67.0
74.0, 59.0, 65.5, 63.0, 69.0, 66.8, 66.0, 75.0, 69.0, 69.8)
rep(1:10, times=5)
rep((seq(0,10,1)), 2)
rep(c((seq(0,10,1)),seq(9,1, -1)), 2)
rep(c((seq(0,10,1)),seq(9,1, -1)), 5)
rep(c((seq(0,10,1)),seq(9,1, -1), 0), 5)
rep(c((seq(0,10,1)),seq(9,1, -1)), 5)
c(rep(c((seq(0,10,1)),seq(9,1, -1)), 5),0)
c(rep(c((seq(0,10,1)),seq(9,1, -1)), 5),0)
y <- c(rep(c((seq(0,10,1)),seq(9,1, -1)), 5),0)
x <- length(y) - 1
?plot
plot(x,y)
x <- 0:(length(y) - 1)
x
plot(x,y)
plot(x,y, type="l")
y <- c(rep(c((seq(0,10,1)),seq(9,1, -1)), 5),0)
x <- 0:(length(y) - 1)
plot(x,y)
plot(x,y, type="l")
plot(x,y)
lines(x,y, type="l")
y <- c(rep(c((seq(0,10,1)),seq(9,1, -1)), 5),0)
x <- 0:(length(y) - 1)
plot(x,y)
lines(x,y, type="l")
x <- seq(0, 2*pi, by = 0.01)
x
a <- seq(0, 2*pi, by = 0.01)
length(a)
plot(cos(a), sin(a))
lines(cos(a)*3/4, sin(a)*3/4)
lines(cos(a)/2, sin(a)/2)
lines(cos(a)/4, sin(a)/4)
plot(cos(a), sin(a), type=l)
plot(cos(a), sin(a), type="l")
plot(cos(a), sin(a), type="l")
lines(cos(a)*3/4, sin(a)*3/4)
lines(cos(a)/2, sin(a)/2)
lines(cos(a)/4, sin(a)/4)
a <- seq(0, 10*2*pi, by = 0.01)
plot(cos(a), sin(a), type="l")
r <- 1.1^a
r
plot(cos(a)*r, sin(a)*r, type="l")
fg <- cos(a)*r
fg
r
cos(a)
a <- seq(0, pi, by = 0.01)
r <- 1.1^a
plot(cos(a)*r, sin(a)*r, type="l")
a <- seq(0, 2*pi, by = 0.01)
r <- 1.1^a
plot(cos(a)*r, sin(a)*r, type="l")
a <- seq(0, 4*pi, by = 0.01)
r <- 1.1^a
lines(cos(a)*r, sin(a)*r, type="l")
plot(r)
plot(r, type="l")
plot(cos(a)*r, sin(a)*r, type="l")a <- seq(0, 10*2*pi, by = 0.01)
a <- seq(0, 10*2*pi, by = 0.01)
r <- 1.1^a
plot(r, type="l")
LastNamesStat470  <- c("Buja",    "Sklar",   "Olson")
FirstNamesStat470 <- c("Andreas", "Michael", "Matt")
paste(FirstNamesStat470, LastNamesStat470)
paste(LastNamesStat470, c("c(# chars=",len(LastNamesStat470)))
paste(LastNamesStat470, c("c(# chars=",length(LastNamesStat470)))
paste(LastNamesStat470, c("(# chars=",length(LastNamesStat470)))
paste(LastNamesStat470,
c(
"(# chars=",length(LastNamesStat470)))
paste(LastNamesStat470,
c(
"(# chars=",length(LastNamesStat470), ")"
)
)
paste(paste(1:length(FirstNamesStat470), ")", sep=""),
FirstNamesStat470,
LastNamesStat470)
paste(paste(???, ")", sep=""),
FirstNamesStat470,
LastNamesStat470)
paste(LastNamesStat470, "(# chars=)")
rats <- length(LastNamesStat470)
rats
nchart(LastNamesStat470)
nchar(LastNamesStat470)
paste(LastNamesStat470, "(# chars=", nchar(LastNamesStat470), ")")
paste(LastNamesStat470, "(# chars=", nchar(LastNamesStat470))
paste(paste(LastNamesStat470, "(# chars=", nchar(LastNamesStat470)), ")")
paste(LastNamesStat470, "(# chars=", nchar(LastNamesStat470), ")")
paste(LastNamesStat470, "(# chars=", nchar(LastNamesStat470), ")", sep="")
paste(LastNamesStat470, " (# chars=", nchar(LastNamesStat470), ")", sep="")
LETTERS
paste(LETTERS, letters, sep="")
paste(1:length(LETTERS), ". ", LETTERS, sep="")
paste(LETTERS, letters, sep="")
paste(rep(LETTERS, 26), letters, sep="")
rep(letters, 2)
paste(c("x","y","z"), rep(0:9, each=3), sep="")
paste(LETTERS, rep(letters, each=1), sep="")
paste(LETTERS, rep(letters, each=length(letters)), sep="")
paste(LETTERS, "-", rep(letters, each=length(letters)), sep="")
paste(rep(LETTERS, each=length(LETTERS)), "-", letters, sep="")
x <- paste(rep(LETTERS, each=length(LETTERS)), "-", letters, sep="")
asd <- c("pM","pM","sF","sM","sF","sM","pM","pM","pM","pM",
"pM","pF","pF","pM","pM","pM","sM","pM","sM","sF")
substring("abcdefghijklmnopqrstuvwxyz", 6, 10)
substring("abcdefghijklmnopqrstuvwxyz", 1, 10)
substring("abcdefghijklmnopqrstuvwxyz", 1, 2)
substring("abcdefghijklmnopqrstuvwxyz", 1, 1)
asd.proband <- 0+(substring(asd, 1, 1)=="p")
asd.proband
asd.female  <- 0+(substring(asd, 2, 2)=="F")
asd.female
help(sort)
Salary <- c(ed=53000, cecilia=53000, beth=49000,
john=48000, alex=50000, matt=48000,
liz=52000, ruth=55000)
save.image()
sort(Salary, decreasing=TRUE)
sum(is.na(c(0, 1, 0/0, 3)))
Salary
sort.int(Salary, partial = NULL, na.last = NA, decreasing = FALSE,
method = c("shell", "quick"), index.return = FALSE)
sort.int(Salary, partial = NULL, na.last = NA, decreasing = TRUE,
method = c("shell", "quick"), index.return = FALSE)
is.na(c(0, 1, 0/0, 3))
help("is.na")
sum(is.na(c("a", 1, 0/0, 3)))
is.na(c("a", 1, 0/0, 3))
c("a", 1, 0/0, 3)
c(2, 1, 0/0, 3)
sum(is.na(c("a", 1, NA, 3)))
is.na(c("a", 1, NA, 3))
c("a", 1, NA, 3)
gsub("p","r", gsub("r","p", word))
word <- "par"
gsub("p","r", gsub("r","p", word))
gsub("r","p", word)
sub("r","p",  sub("p","r", word))
sub("p","r", word)
word
sub("r","p",  sub("p","r", word))
help(gsub)
sort(Salary)
sort(Salary, T)
sub("p","r",  sub("r","p", word))
word
StudentFemaleYN <- sub("...", "...", sub("...", "...", StudentGenders))
StudentGenders <- c("male",  "male",  "female","male",  "female",
"female","female","male",  "female","female",
"female","male",  "male",  "male",  "female",
"male",  "female","female","female","female")
save.image()
StudentFemaleYN <- sub("...", "...", sub("...", "...", StudentGenders))
StudentFemaleYN
StudentFemaleYN <- sub("male", "N", sub("female", "Y", StudentGenders))
StudentFemaleYN
StudentFemaleYN <- sub("female", "Y", sub("male", "N", StudentGenders))
StudentFemaleYN
all(x,y,z)
all(c(x,y,z))
z <- 2
all(c(x,y,z))
z <- c(1,2,3)
all(c(x,y,z))
x <- (3,2,1)
x <- c(3,2,1)
y <- c(4,5,6)
all(c(x,y,z))
all(x,y,z)
any(StudentHeights >= 80)
help(any)
help(all)
help(c)
any(1,2,3, >= 80)
any(1,2,3 >= 80)
help(sort)
x <- c(TRUE, TRUE, FALSE, FALSE)
y <- c(TRUE, FALSE, TRUE, FALSE)
(!x) | (!y)
(!x) & (!y)
!(x | y)
!(x & y)
help(all)
help(any)
u <- FALSE
v <- TRUE
w <- FALSE
all(u,v,w)
any(u,v,w)
u & v & w
u | v | w
all(!z)
z <- c(FALSE, TRUE, TRUE)
all(!z)
any(!z)
!all(z)
!any(z)
Salary
Salary.age <- c(ed=36, cecilia=32, beth=29, john=28,
alex=33, matt=27, liz=35, ruth=37)
save.image()
!((Salary.age < 30) & (Salary < 50000))
(Salary.age > 30) & (Salary >= 50000)
help(plot)
help(min)
plot(x=Salary.age, y=Salary, pch=16,
ylim=c(min(Salary) - 1000, max(Salary) + 1000),
xlim=c(min(Salary.age) - 1), max(Salary.age) + 1)
plot(x=Salary.age, y=Salary, pch=16,
ylim=c(min(Salary) - 1000, max(Salary) + 1000),
xlim=c(min(Salary.age) - 1, max(Salary.age) + 1))
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
plot(x=Salary.age, y=Salary, pch=16,
ylim=c(min(Salary) - 1000, max(Salary) + 1000),
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
asd.proband <- 0+(substring(asd, 1, 1)=="p")
asd.proband
substring(asd, 1, 1)
substring(asd, 1, 2)
substring(asd, 2, 2)
asd.proband
Salary.in.1000 <- Salary * 1000
Salary.in.1000
plot(x=Salary.age, y=Salary.in.1000, pch=16,
ylim=c(min(Salary) - 1000, max(Salary) + 1000),
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
plot(x=Salary.age, y=Salary.in.1000, pch=16,
ylim=c(min(Salary.in.1000) - 1000, max(Salary.in.1000) + 1000),
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
plot(x=Salary.age, y=Salary, pch=16,
ylim=c(min(Salary) - 1000, max(Salary) + 1000),
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
Salary.in.1000 <- Salary / 1000
plot(x=Salary.age, y=Salary.in.1000, pch=16,
ylim=c(min(Salary.in.1000) - 1, max(Salary.in.1000) + 1),
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
plot(x=Salary.age, y=Salary.in.1000, pch=16, xlab='Age', ylab='Annual Salary in $1,000',
ylim=c(min(Salary.in.1000) - 1, max(Salary.in.1000) + 1),
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
help(text)
plot(x=Salary.age, y=Salary.in.1000, pch=16, xlab='Age', ylab='Annual Salary in $1,000',
ylim=c(min(Salary.in.1000) - 1, max(Salary.in.1000) + 1),
xlim=c(min(Salary.age) - 2, max(Salary.age) + 2))
text(x=Salary.age, y=Salary.in.1000, labels=names(Salary), pos = 3, cex=.6)
help(sel)
Salary
Salary.gender <- c("ed"  ="male",   "cecilia"="female", "beth"="female",
"john"="male",   "alex"   ="male",   "matt"="male",
"liz" ="female", "ruth"   ="female" )
save.image()
Salary
sel <- (Salary.gender=="male" & Salary.age > 30)
sel
points(Salary.age[sel], Salary.in.1000[sel], pch=16, col="red")
Salary.age
help(points)
points(Salary.age[sel], Salary.in.1000[sel], pch=16, col="red", cex=1.5)
title(main="Salary as a Function of Age")
sum(is.na(c("a", 1, 0/0, 3)))
is.na(c("a", 1, 0/0, 3))
sum(is.na(c("a", 1, NA, 3)))
is.na(c("a", 1, NA, 3))
help(NA)
is.na(NA)
help(is.na)
paste(LastNamesStat470, " (# chars=", nchar(LastNamesStat470), ")", sep="")
x <- paste(rep(LETTERS, each=length(LETTERS)), "-", letters, sep="")
x
asd <- c("pM","pM","sF","sM","sF","sM","pM","pM","pM","pM",
"pM","pF","pF","pM","pM","pM","sM","pM","sM","sF")
asd.proband <- 0+(substring(asd, 1, 1)=="p")
asd.female  <- 0+(substring(asd, 2, 2)=="F")
asd.proband
sort(Salary, decreasing=TRUE)
sort(Salary, T)
!((Salary.age < 30) & (Salary < 50000))
mutate(gene, ext=tbl_df(gene))
library(dplyr)
mutate(gene, ext=tbl_df(gene))
help("mutate")
mutate(gene, ext=gene)
mutate(gene, chromX=gsub(":.*", "", location)=="X") %>% tbl_df -> gene.ext
library(dplyr)
mutate(gene, chromX=gsub(":.*", "", location)=="X") %>% tbl_df -> gene.ext
setwd(dir = "Desktop/school/stat_470/code/homework_3")
gene <- read.csv("nature13908-s2/Supplementary Table 2.csv", as.is=T, header = T, stringsAsFactors = T)
mutate(gene, chromX=gsub(":.*", "", location)=="X") %>% tbl_df -> gene.ext
gene.ext
gene.ext$chromX
chromX length(chromX)
gene.ext %>% group_by(chromX) %>% summarize(length(chromX))
